#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

bme280 - Plugin to monitor BME280 sensor via sysfs

=head1 CONFIGURATION

The following environment variables are available

 <internal_name>.label     - Label
 <internal_name>.altitude - Altitude [m]

If altitude is specified, sea level pressure is recorded instead of local pressure.

The following shows a typical configuration:

 [bme280_*]
 env._1_0076.label Lliving
 env._1_0077.label Corridor

=head1 AUTHOR

Unknown author

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

=cut

use strict;
use Munin::Plugin;


sub find_devices {
	glob("/sys/bus/i2c/devices/*-{0076,0077}/iio:device*");
}

sub get_addrs {
	my @devices = find_devices();
	map { m|devices/([-\d]+)/| } @devices;
}

sub get_devpath {
	(glob("/sys/bus/i2c/devices/$_[0]/iio:device*"))[0];
}

sub read_file {
	my ($fname) = @_;
	open(my $F, '<', $fname) or die;
	my $text = do { local $/; <$F> };
	close($F);
	chomp $text;
	$text;
}


if ($ARGV[0] and $ARGV[0] eq "autoconf") {
	if (find_devices()) {
		print "yes\n";
	}
	else {
		print "no\n";
	}
	exit 0;
}

if ($ARGV[0] and $ARGV[0] eq "suggest") {
	print "pressure\n";
	print "temp\n";
	print "humidityrelative\n";
	exit 0;
}

my ($func) = $0 =~ /_(\w+)$/;
exit 2 unless defined $func;


if ($ARGV[0] and $ARGV[0] eq "config") {
	if ($func eq "pressure") {
		print "graph_title Pressure\n";
		print "graph_args --lower-limit 900 --upper-limit 1050\n";
		print "graph_args_after --y-grid 10:5\n";
		print "graph_vlabel hPa\n";
		print "graph_scale no\n";
		print "graph_category weather\n";
	}
	elsif ($func eq "temp") {
		print "graph_title Temperature\n";
		print "graph_vlabel Celsius\n";
		print "graph_scale no\n";
		print "graph_category weather\n";
	}
	elsif ($func eq "humidityrelative") {
		print "graph_title Humidity\n";
		print "graph_args --lower-limit 0 --upper-limit 100\n";
		print "graph_vlabel %RH\n";
		print "graph_scale no\n";
		print "graph_category weather\n";
	}
	else {
		exit 1;
	}
}


foreach my $addr (get_addrs()) {
	my $node = get_devpath($addr);
	my $name = clean_fieldname("i2c_$addr");
	my $label = $ENV{"${name}.label"} || read_file("$node/name");
	my $h = $ENV{"${name}.altitude"} || 0;

	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "${name}.label $label\n";
		exit 0;
	}

	if ($func eq "pressure") {
		my $p = read_file("$node/in_pressure_input");
		my $t = read_file("$node/in_temp_input");
		$t /= 1000;
		$p *= 10; # kPa to hPa

		# 海抜が指定されている場合は海面気圧へ変換
		if ($h > 0) {
			$p = $p*(1-(($h*0.0065)/($t+$h*0.0065+273.15)))**-5.257;
		}

		# 海面気圧 P0
		#     P0 = P*(1-((H*0.0065)/(T+H*0.0065+273.15)))**-5.257
		# ただし
		#   P = 現地気圧
		#   T = 現地気温
		#   H = 現地海抜(meter)

		print "${name}.value $p\n";
	}
	elsif ($func eq "temp") {
		my $t = read_file("$node/in_temp_input");
		$t /= 1000;
		print "${name}.value ${t}\n";
	}
	elsif ($func eq "humidityrelative") {
		my $h = read_file("$node/in_humidityrelative_input");
		$h /= 1000;
		print "${name}.value ${h}\n";
	}
}

exit 0;
